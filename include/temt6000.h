/**
 * @file temt6000.h
 * @author Damian Åšlusarczyk
 * @brief Contains functions to communicate with TEMT6000 using ADC.
 * 
 */
#ifndef TEMT6000_H
#define TEMT6000_H

#include <stdint.h>

#include "driver/adc.h"
#include "esp_adc_cal.h"

#include "temt6000_error_codes.h"
#include "temt6000_types_res.h"

typedef struct TEMT6000_t           TEMT6000_t;

/**
 * @brief Describes characteristics of single TEMT6000.
 * 
 */
struct TEMT6000_t
{
    esp_adc_cal_characteristics_t   adcCharacteristics; /**< Characteristics of selected ADC unit */
    adc_channel_t                   channel;            /**< Selected ADC channel */
};

/**
 * @brief Initializes TEMT6000 device instance with given ADC characteristics.
 * 
 * Prepares ADC unit to measure voltage output generated by the connected device.
 * 
 * @param device Pointer to TEMT6000 characteristics instance to initialize
 * @param unit ADC unit selected for measuring output from TEMT6000
 * @param channel ADC channel selected for measuring output from TEMT6000
 * @return TEMT6000_error_t Status code of the operation
 */
TEMT6000_error_t temt6000__Init(TEMT6000_t * const device, const adc_unit_t unit, const adc_channel_t channel);

/**
 * @brief Reads measured illuminance (lux) by selected TEMT6000.
 * 
 * Converts voltage output from the connected device into human-readable value.
 * Convertion is based on specified number of samples - then the average of the measurement results is calculated.
 * 
 * @param device Pointer to TEMT6000 characteristics instance
 * @param samplesNo Number of measurement samples
 * @param illuminanceOut Pointer to variable where measured illuminance will be saved eventually
 * @return TEMT6000_error_t Status code of the operation
 */
TEMT6000_error_t temt6000__ReadIlluminance(const TEMT6000_t * const device, const uint32_t samplesNo, TEMT6000_illuminance_t * const illuminanceOut);

/**
 * @brief Reads measured light intensity (%) by selected TEMT6000.
 * 
 * Converts voltage output from the connected device into human-readable value.
 * Convertion is based on specified number of samples - then the average of the measurement results is calculated.
 * 
 * @param device Pointer to TEMT6000 characteristics instance
 * @param samplesNo Number of measurement samples
 * @param intensityOut Pointer to variable where measured light intensity will be saved eventually
 * @return TEMT6000_error_t Status code of the operation
 */
TEMT6000_error_t temt6000__ReadLightIntensity(const TEMT6000_t * const device, const uint32_t samplesNo, TEMT6000_intensity_t * const intensityOut);

/**
 * @brief Converts specified illuminance to light intensity.
 * 
 * @param illuminance Specified illuminance (lux)
 * @return TEMT6000_intensity_t Result of the convertion - light intensity (%)
 */
TEMT6000_intensity_t temt6000__IlluminanceToLightIntensity(const TEMT6000_illuminance_t illuminance);

#endif /* TEMT6000_H */
